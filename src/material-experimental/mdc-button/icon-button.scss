@use 'sass:map';
@use '@material/icon-button/icon-button' as mdc-icon-button;
@use '@material/icon-button/icon-button-theme' as mdc-icon-button-theme;
@use '../../material/core/style/private';
@use '../mdc-helpers/mdc-helpers';
@use 'button-base';

@include mdc-helpers.disable-fallback-declarations {
  @include mdc-icon-button.core-styles($query: mdc-helpers.$mat-base-styles-query);
}

.mat-mdc-icon-button {
  @include mdc-helpers.disable-fallback-declarations {
    $theme-overrides: (
      icon-color: inherit,
      // We don't change the color on focus/hover so exclude
      // these styles both to reduce bundle size and specificity.
      focus-icon-color: null,
      hover-icon-color: null,
      pressed-icon-color: null,
    );

    @include mdc-icon-button-theme.theme-styles(
      map.merge(mdc-icon-button-theme.$light-theme, $theme-overrides));
  }

  // Prevent the button from shrinking since it's always supposed to be a circle.
  flex-shrink: 0;

  @include button-base.mat-private-button-disabled() {
    // The color is already dimmed when the button is disabled. Restore the opacity both to
    // help with the color contrast and to align with what we had before switching to the new API.
    opacity: 1;
  };

  @include button-base.mat-private-button-interactive();
  @include button-base.mat-private-button-touch-target(true);
  @include private.private-animation-noop();

  // MDC adds some styles to icon buttons that conflict with some of our focus indicator styles
  // and don't actually do anything. This undoes those conflicting styles.
  &.mat-unthemed,
  &.mat-primary,
  &.mat-accent,
  &.mat-warn {
    &:not(.mdc-ripple-upgraded):focus::before {
      background: transparent;
      opacity: 1;
    }
  }
}
